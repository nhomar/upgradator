#!/usr/bin/env python
# -*- encoding: utf-8 -*-
'''
This Script can help you to verify the impact of migrate a module
from one version to another in terms of how much models you need to verify

It is specially usefull when you need to analyse a module in OpenERP or
Openerp Community and then, understand what you need to test,
even before install it.

If you have Technical Knowledge it can be used mixed with other script
to automigrate your module.

TODO: Auto apply pep8.
TODO: Modify what is obvious must be modified.
'''

import logging
import argparse
import upgradator
import migrate_V7

parser = argparse.ArgumentParser(
    description='This Script can help you to verify the impact of migrate a module')
parser.add_argument('-p', '--path', required=True, help='Path where are the modules to verify')
parser.add_argument('-v', '--views', required=False, help='''
                     Use if you want migrate view to next version
                     Use 'a' if you want change all to view
                     Use 't' Basicaly change to work with V7 standard
                     Use 'x' Only change xpath route to use the realative way''')
parser.add_argument('-m', '--migrate', required=False, help='''
                     Use if you want migrate import method and class definition .
                     Use 'a' if you want change all to import
                     Use 'cl' if you want change only class definition
                     Use 'im' if you want change only import definition''')
parser.add_argument('-P', '--pep', action="store_true", required=False,
                    help='Use if you want apply pep8 in all files with python code. To use this option you need install pep8 and autopep8 libraries')
args = parser.parse_args()

if args.pep:
    try:
        import pep8
        import autopep8
    except:
        logging.warning(
            'To check and apply pep8 style you need install the libraries pep8 and autopep8 sudo pip install pep8 autopep8 ')

if __name__ == "__main__":

    path_to_explore = args.path
    migrate = False
    view = False
    if args.migrate:
        migrate = migrate_V7.migrate_next_version()
    if args.views:
        view = migrate_view.migrate_view()
    tof = ['.xml', '.py', '.csv']
    result = [upgradator.main(path_to_explore, t, migrate, view, args) for t in tof]
    logging.getLogger().setLevel(logging.INFO)
    logging.info("Description, %s" % ("Total Elements"))
    logging.info("Total New Classes, %s" % len(result[1].get('classes')))
    different = len(list(set(result[1].get('inherited'))))
    different and \
        logging.info("Total Inherited Classes, %s" % different)
    result[1].get('def') and \
        logging.info("Total Methods, %s" % len(result[1].get('def')))
    result[1].get('pep') and \
        logging.warning("Total of pep8 mistakes, %s" % len(result[1].get('pep')))
    result[1].get('pep_solved') and \
        logging.info("Total of pep8 apply, %s" % len(result[1].get('pep_solved')))
    result[1].get('pep_n_solved') and \
        logging.warning("Total of pep8 not apply because you need do it manualy, %s" %
                        len(result[1].get('pep_n_solved')))
    result[1].get('create') and \
        logging.info("Total Create, %s" % len(result[1].get('create')))
    result[1].get('write') and \
        logging.info("Total Write, %s" % len(result[1].get('write')))
    result[1].get('unlink') and \
        logging.info("Total Unlink, %s" % len(result[1].get('unlink')))
    result[1].get('new_field') and \
        logging.info("Total New Fields, %s" % len(result[1].get('new_field')))
    result[1].get('commented') and \
        logging.info("Total fields with helps, %s" % len(result[1].get('commented')))
    result[1].get('n_commented') and \
        logging.info("Total fields without helps, %s" % len(result[1].get('n_commented')))
    result[0].get('views') and \
        logging.info("Total Views,  %s" % len(result[0].get('views')))
    result[0].get('action') and \
        logging.info("Total Actions,  %s" % len(result[0].get('action')))
    result[0].get('menus') and \
        logging.info("Total Menus,  %s" % len(result[0].get('menus')))
    result[0].get('workflow') and \
        logging.info("Total Workflow,  %s" % len(result[0].get('workflow')))
    result[0].get('mistake_view') and \
        logging.warning("Total depreciated views, %s" %
                        len(result[0].get('mistake_view')))
    result[0].get('report') and \
        logging.info("Total Reports,  %s" % len(result[0].get('report')))
    result[0].get('groups') and \
        logging.info("Total Groups,  %s" % len(result[0].get('groups')))
    result[2].get('rules') and \
        logging.info("Total Rules,  %s" % len(result[2].get('rules')))
    logging.info("Total authors,  %s" %
                 str(len(set(result[1].get('author')))))
